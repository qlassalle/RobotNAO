topic: ~example_topic()
language: frf

concept:(jour) [premier 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]

concept:(mois) [janvier fevrier mars avril mai mais met juin juillet aout septembre octobre novembre decembre]

concept:(annee) [2018 2019 2020 2021 2022 2023 2024]

concept:(projet) [projet projais progeai projé projets]

concept:(quel) [quels quel quelle]

concept:(parle) ["Parle nous des projets d'aujourd'hui" "Parle nous des projet d'aujourd'hui"]

u:(_~projet du _~jour _~mois _~annee) La date demandée est $2 $3 $4


u:(telecharge)

%script

import urllib

speech = ALProxy("ALTextToSpeech")
speech.say("Ok, je télécharge ...")
urllib.urlretrieve("http://marc-antoine-salsedo.fr/evenements.csv", "/home/nao/dialog/evenements.csv")

def read_csv(csv_file):
    data = []
    with open(csv_file, 'r') as f:

        # create a list of rows in the CSV file
        rows = f.readlines()

        # strip white-space and newlines
        rows = list(map(lambda x:x.strip(), rows))

        for row in rows:

            # further split each row into columns assuming delimiter is comma 
            row = row.split(',')

            # append to data-frame our new row-object with columns
            data.append(row)

    return data

csvFile = '/home/nao/dialog/evenements.csv'

# invoke our function 
data = read_csv(csvFile)
entete = data[0][0].split(';')
intervenants = []
projets = []
descriptions = []
dates = []
heures = []
dtimes = []
for row in data[1:]:
    ligne = row[0].split(';')
    intervenants.append(ligne[0])
    projets.append(ligne[1])
    descriptions.append(ligne[2])
    dates.append(ligne[3])
    heures.append(ligne[4])
    dt = ligne[3] + " " + ligne[4]
    dtimes.append(dt)

memory = ALProxy("ALMemory")
memory.insertData("intervenants", intervenants)
memory.insertData("projets", projets)
memory.insertData("descriptions", descriptions)
memory.insertData("dates", dates)
memory.insertData("dtimes", dtimes)

# proxy = ALProxy("ALDialog")
# proxy.setConcept("intervenant","frf", ["Jean", "Marc Machin", "Toto Tata"])

speech.say("Ok, je l'ai téléchargé et j'ai trouvé " + str(len(intervenants)) + " éléments")

%script


u: (intervenants)

%script

intervenants = memory.getData("intervenants")
speech = ALProxy("ALTextToSpeech")

speech.say("Les intervenants sont :")
for intervenant in intervenants:
	speech.say(intervenant)

%script


u: (projets)

%script

projets = memory.getData("projets")
speech = ALProxy("ALTextToSpeech")

speech.say("Les projets sont :")
for projet in projets:
	speech.say(projet)

%script

u: (Quand ont lieu les prochaines présentations ?)

%script

dates = memory.getData("dates")
speech = ALProxy("ALTextToSpeech")

speech.say("Les prochaines présentations ont lieu")
for date in dates:
	speech.say("le "  + date)

%script

u: (Décris nous les projets)

%script

descriptions = memory.getData("descriptions")
speech = ALProxy("ALTextToSpeech")

speech.say("Voici une brève description des prochaines présentations")
for description in descriptions:
	speech.say(description)

%script

u:(Donne moi les projets du _*) Apres input humain $1 $date=$1

%script

speech = ALProxy("ALTextToSpeech")
speech.say("dans script")
memory = ALProxy("ALMemory")
date = memory.getData("date")
speech.say("Projets du " + str(date))

%script

dynamic:intervenant
u:(Parle moi de _~intervenant) Je vais dire les projets présentés par $1

%script

speech = ALProxy("ALTextToSpeech")
memory = ALProxy("ALMemory")
# intervenant = memory.getData("intervenant")
# speech.say("J'ai compris que je devais dire les projets qui vont être présentés par " + intervenant)

%script

u:(Passes en mode décompte) 

%script
 
from datetime import datetime, timedelta
from threading import Timer, Thread
from time import sleep

speech = ALProxy("ALTextToSpeech")

speech.say("Mode décompte activé !")

def timeout_x(timeout):
	if timeout == 60:
		speech.say("La prochaine présentation aura lieu dans une heure, venez nombreux !")
	elif timeout == 5:
		speech.say("La prochaine présentation est dans cinq minutes, allez vite vous installer !")
	else:
		speech.say("Votre attention s'il vous plait ! La prochaine presentation aura lieu dans " +  str(timeout) + " minutes !")

def thread_timer(minutes, timeout):
	sleep(minutes)
	timeout_x(timeout)


diff_minutes = []
for dtime in dtimes:
	dtime_date = dtime.split(' ') #separation de la date et de l'heure
	dt_now = datetime.now()
	dt_now_str = '{:02d}'.format(dt_now.day) + '/' + '{:02d}'.format(dt_now.month) + '/' + str(dt_now.year) + ' ' + str(dt_now.hour) + ':' + str(dt_now.minute) #formatage de la date du jour
	dt_now_str_date = dt_now_str.split(' ')
	if dtime_date[0] == dt_now_str_date[0] : # comparaison des dates, ne prend que les présentations du jour 
		dtime_date_time = dtime_date[1].split(':') #separation de l'heure et des minutes
		dt_now_str_time = dt_now_str_date[1].split(':')

		time_in_minutes_pres = int(dtime_date_time[0]) * 60 + int(dtime_date_time[1]) 
		time_in_minutes_now = int(dt_now_str_time[0]) * 60 + int(dt_now_str_time[1])
		diff_minutes.append(time_in_minutes_pres - time_in_minutes_now) #temps en minutes avant l'heure de la présentation

#logique de code a revoir
for diff in diff_minutes:
	speech.say("Temps avant prochaine présentation : " + str(diff) + "minutes")
	if diff < 80  and diff >= 60:
		minutes_60 = (diff-60) * 60
		t_60 = Thread(target=thread_timer, args=(minutes_60, 60, ))
		t_60.start()

		minutes_45 = (diff-45) * 60
		t_45 = Thread(target=thread_timer, args=(minutes_45, 45, ))
		t_45.start()

		minutes_30 = (diff-30) * 60
		t_30 = Thread(target=thread_timer, args=(minutes_30, 30, ))
		t_30.start()

		minutes_15 = (diff-15) * 60
		t_15 = Thread(target=thread_timer, args=(minutes_15, 15, ))
		t_15.start()

		minutes_10 = (diff-10) * 60
		t_10 = Thread(target=thread_timer, args=(minutes_10, 10, ))
		t_10.start()

		minutes_5 = (diff-5) * 60
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	if diff < 60  and diff >= 45:
		minutes_45 = (diff-45) * 60
		t_45 = Thread(target=thread_timer, args=(minutes_45, 45, ))
		t_45.start()

		minutes_30 = (diff-30) * 60
		t_30 = Thread(target=thread_timer, args=(minutes_30, 30, ))
		t_30.start()

		minutes_15 = (diff-15) * 60
		t_15 = Thread(target=thread_timer, args=(minutes_15, 15, ))
		t_15.start()

		minutes_10 = (diff-10) * 60
		t_10 = Thread(target=thread_timer, args=(minutes_10, 10, ))
		t_10.start()

		minutes_5 = (diff-5) * 60
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	if diff < 45  and diff >= 30:
		minutes_30 = (diff-30) * 60
		t_30 = Thread(target=thread_timer, args=(minutes_30, 30, ))
		t_30.start()

		minutes_15 = (diff-15) * 60
		t_15 = Thread(target=thread_timer, args=(minutes_15, 15, ))
		t_15.start()

		minutes_10 = (diff-10) * 60
		t_10 = Thread(target=thread_timer, args=(minutes_10, 10, ))
		t_10.start()

		minutes_5 = (diff-5) * 60
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	if diff < 30  and diff >= 15:
		minutes_30 = (diff-30) * 60
		t_30 = Thread(target=thread_timer, args=(minutes_30, 30, ))
		t_30.start()

		minutes_15 = (diff-15) * 60
		t_15 = Thread(target=thread_timer, args=(minutes_15, 15, ))
		t_15.start()

		minutes_10 = (diff-10) * 60
		t_10 = Thread(target=thread_timer, args=(minutes_10, 10, ))
		t_10.start()

		minutes_5 = (diff-5) * 60
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	if diff < 15  and diff >= 10:
		minutes_10 = (diff-10) * 60
		speech.say("minutes_10 = " + str(minutes_10))
		t_10 = Thread(target=thread_timer, args=(minutes_10, 10, ))
		t_10.start()

		minutes_5 = (diff-5) * 60
		speech.say("minutes_5 = " + str(minutes_5))
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	if diff < 10  and diff > 5:
		minutes_5 = (diff-5) * 60
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()
		
%script