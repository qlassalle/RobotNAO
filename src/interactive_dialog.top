topic: ~example_topic()
language: frf

include:basic_sentences.top

concept:(jour) [premier 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]

concept:(mois) [janvier fevrier mars avril mai juin juillet aout septembre octobre novembre decembre]

concept:(annee) [2018 2019 2020 2021 2022 2023 2024]

concept:(projet) ["Donne moi les projets" "Donne moi les projais" "Donne moi les progeai" "Donne moi les projé" "Donne moi les progé"]

concept:(salut) ^rand[coucou salut bonjour hey "hey!" bonjour "salut poto" Bonsoir coucou]

concept:(oui) [oui affirmatif assurément absolument totalement completement ok]
concept:(non) [non négatif "c'est mort" "pas moyen" nop "je refuse" "c'est non"]

concept:(quel) [quels quel quelle]

concept:(parle) ["Parle nous des projets d'aujourd'hui" "Parle nous des projet d'aujourd'hui"]	

u:(e:FrontTactilTouched) Ne me touchez pas!
u:(~salut) ~salut

proposal: Etape une, Mettre la farine dans un bol et former un puits
proposal: Etape 2, Dans un saladier, mélangez le sucre, les oeufs, le sucre vanillé
proposal: Etape 3,  Ajoutez la crème fraiche
proposal: Etape 4,  Etalez la pâte dans un moule à tarte et piquez le fond à l'aide d'une fourchette. Disposez les pommes sur la pâte et versez le tout sur les pommes ou versez uniquement la crème
proposal: Etape 5, Puis disposer les lamelles de pommes roulées sur elles-même en roses.
proposal: Etape 6, Enfournez environ 30 minutes, jusqu'à ce que la tarte prenne une belle couleur dorée
proposal: Etape 7, Allez vous faire enculer

u:(Je veux faire une tarte aux pommes) ok, je vais te guider, dis moi suivant! quand tu veux que je te donne l'instruction suivante.

u:(suivant) ^nextProposa

u:(telecharge)

%script

import urllib

speech = ALProxy("ALTextToSpeech")
speech.say("Ok, je télécharge ...")
#urllib.urlretrieve("http://marc-antoine-salsedo.fr/evenements.csv", "/home/nao/dialog/evenements.csv")

def read_csv(csv_file):
    data = []
    with open(csv_file, 'r') as f:

        # create a list of rows in the CSV file
        rows = f.readlines()

        # strip white-space and newlines
        rows = list(map(lambda x:x.strip(), rows))

        for row in rows:

            # further split each row into columns assuming delimiter is comma 
            row = row.split(',')

            # append to data-frame our new row-object with columns
            data.append(row)

    return data

csvFile = '/home/nao/dialog/evenements.csv'

# invoke our function 
data = read_csv(csvFile)
entete = data[0][0].split(';')
intervenants = []
projets = []
descriptions = []
dates = []
heures = []
dtimes = []
for row in data[1:]:
    ligne = row[0].split(';')
    intervenants.append(ligne[0])
    projets.append(ligne[1])
    descriptions.append(ligne[2])
    dates.append(ligne[3])
    heures.append(ligne[4])
    dt = ligne[3] + " " + ligne[4]
    dtimes.append(dt)

memory = ALProxy("ALMemory")
memory.insertData("intervenants", intervenants)
memory.insertData("projets", projets)
memory.insertData("descriptions", descriptions)
memory.insertData("dates", dates)
memory.insertData("dtimes", dtimes)

# proxy = ALProxy("ALDialog")
# proxy.setConcept("intervenant","frf", ["Jean", "Marc Machin", "Toto Tata"])

speech.say("Ok, je l'ai téléchargé et j'ai trouvé " + str(len(intervenants)) + " éléments")

%script


u: (intervenants)

%script

intervenants = memory.getData("intervenants")
speech = ALProxy("ALTextToSpeech")

speech.say("Les intervenants sont :")
for intervenant in intervenants:
	speech.say(intervenant)

%script

u: (Quand ont lieu les prochaines présentations ?)

%script

dates = memory.getData("dates")
speech = ALProxy("ALTextToSpeech")

speech.say("Les prochaines présentations ont lieu")
for date in dates:
	speech.say("le "  + date)

%script

u: (Décris nous les projets)

%script

descriptions = memory.getData("descriptions")
speech = ALProxy("ALTextToSpeech")

speech.say("Voici une brève description des prochaines présentations")
for description in descriptions:
	speech.say(description)

%script

# u:(Donne moi les projets du _*) Apres input humain $1 $date=$1

# %script

# speech = ALProxy("ALTextToSpeech")
# speech.say("dans script")
# memory = ALProxy("ALMemory")
# date = memory.getData("date")
# speech.say("Projets du " + str(date))

# %script

dynamic:intervenant
u:(Parle moi de _~intervenant) Je vais dire les projets présentés par $1

%script

speech = ALProxy("ALTextToSpeech")
memory = ALProxy("ALMemory")
# intervenant = memory.getData("intervenant")
# speech.say("J'ai compris que je devais dire les projets qui vont être présentés par " + intervenant)

%script

u:(Passes en mode décompte) 

%script
 
from datetime import datetime, timedelta
from threading import Timer, Thread
from time import sleep

speech = ALProxy("ALTextToSpeech")

speech.say("Mode décompte activé !")

def timeout_x(timeout):
	if timeout == 60:
		speech.say("La prochaine présentation aura lieu dans une heure, venez nombreux !")
	elif timeout == 5:
		speech.say("La prochaine présentation est dans cinq minutes, allez vite vous installer !")
	else:
		speech.say("Votre attention s'il vous plait ! La prochaine presentation aura lieu dans " +  str(timeout) + " minutes !")

def thread_timer(minutes, timeout):
	sleep(minutes)
	timeout_x(timeout)


diff_minutes = []
for dtime in dtimes:
	dtime_date = dtime.split(' ') #separation de la date et de l'heure
	dt_now = datetime.now()
	dt_now_str = '{:02d}'.format(dt_now.day) + '/' + '{:02d}'.format(dt_now.month) + '/' + str(dt_now.year) + ' ' + str(dt_now.hour) + ':' + str(dt_now.minute) #formatage de la date du jour
	dt_now_str_date = dt_now_str.split(' ')
	if dtime_date[0] == dt_now_str_date[0] : # comparaison des dates, ne prend que les présentations du jour 
		dtime_date_time = dtime_date[1].split(':') #separation de l'heure et des minutes
		dt_now_str_time = dt_now_str_date[1].split(':')

		time_in_minutes_pres = int(dtime_date_time[0]) * 60 + int(dtime_date_time[1]) 
		time_in_minutes_now = int(dt_now_str_time[0]) * 60 + int(dt_now_str_time[1])
		diff_minutes.append(time_in_minutes_pres - time_in_minutes_now) #temps en minutes avant l'heure de la présentation

#logique de code a revoir
for diff in diff_minutes:
	speech.say("Temps avant prochaine présentation : " + str(diff) + "minutes")
	if diff < 80  and diff >= 60:
		minutes_60 = (diff-60) * 60
		t_60 = Thread(target=thread_timer, args=(minutes_60, 60, ))
		t_60.start()

		minutes_45 = (diff-45) * 60
		t_45 = Thread(target=thread_timer, args=(minutes_45, 45, ))
		t_45.start()

		minutes_30 = (diff-30) * 60
		t_30 = Thread(target=thread_timer, args=(minutes_30, 30, ))
		t_30.start()

		minutes_15 = (diff-15) * 60
		t_15 = Thread(target=thread_timer, args=(minutes_15, 15, ))
		t_15.start()

		minutes_10 = (diff-10) * 60
		t_10 = Thread(target=thread_timer, args=(minutes_10, 10, ))
		t_10.start()

		minutes_5 = (diff-5) * 60
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	elif diff < 60  and diff >= 45:
		minutes_45 = (diff-45) * 60
		t_45 = Thread(target=thread_timer, args=(minutes_45, 45, ))
		t_45.start()

		minutes_30 = (diff-30) * 60
		t_30 = Thread(target=thread_timer, args=(minutes_30, 30, ))
		t_30.start()

		minutes_15 = (diff-15) * 60
		t_15 = Thread(target=thread_timer, args=(minutes_15, 15, ))
		t_15.start()

		minutes_10 = (diff-10) * 60
		t_10 = Thread(target=thread_timer, args=(minutes_10, 10, ))
		t_10.start()

		minutes_5 = (diff-5) * 60
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	elif diff < 45  and diff >= 30:
		minutes_30 = (diff-30) * 60
		t_30 = Thread(target=thread_timer, args=(minutes_30, 30, ))
		t_30.start()

		minutes_15 = (diff-15) * 60
		t_15 = Thread(target=thread_timer, args=(minutes_15, 15, ))
		t_15.start()

		minutes_10 = (diff-10) * 60
		t_10 = Thread(target=thread_timer, args=(minutes_10, 10, ))
		t_10.start()

		minutes_5 = (diff-5) * 60
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	elif diff < 30  and diff >= 15:
		minutes_30 = (diff-30) * 60
		t_30 = Thread(target=thread_timer, args=(minutes_30, 30, ))
		t_30.start()

		minutes_15 = (diff-15) * 60
		t_15 = Thread(target=thread_timer, args=(minutes_15, 15, ))
		t_15.start()

		minutes_10 = (diff-10) * 60
		t_10 = Thread(target=thread_timer, args=(minutes_10, 10, ))
		t_10.start()

		minutes_5 = (diff-5) * 60
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	elif diff < 15  and diff >= 10:
		minutes_10 = (diff-10) * 60
		speech.say("minutes_10 = " + str(minutes_10))
		t_10 = Thread(target=thread_timer, args=(minutes_10, 10, ))
		t_10.start()

		minutes_5 = (diff-5) * 60
		speech.say("minutes_5 = " + str(minutes_5))
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	elif diff < 10  and diff > 5:
		minutes_5 = (diff-5) * 60
		t_5 = Thread(target=thread_timer, args=(minutes_5, 5, ))
		t_5.start()

	else:
		speech.say("Aucune présentation n'a lieu bientôt, revenez plus tard !")

if not diff_minutes:
	speech.say("Aucune présentation aujourd'hui, revenez un autre jour !")
		
%script
u:(accède aux évènements de nanterre)
#Date/Projet/Porteur du projet/Titre/Presentation

%script

import urllib
import itertools
speech = ALProxy("ALTextToSpeech")

intervenants = []
projets = []
descriptions = []
dates = []
titres = []
heures = []
vips = []

def read_csv(csv_file):
    data = []
    with open(csv_file, 'r') as f:

        # create a list of rows in the CSV file
        rows = f.readlines()

        # strip white-space and newlines
        rows = list(map(lambda x:x.strip(), rows))

        for row in rows:

            # further split each row into columns assuming delimiter is comma 
            row = row.split(',')

            # append to data-frame our new row-object with columns
            data.append(row)

    return data

reponseStr = []
speech.say("Ok, je télécharge depuis paris nanterre...")
urllib.urlretrieve("https://sharepoint.parisnanterre.fr/wp-content/uploads/2018/06/evenements.csv", "/home/nao/dialog/ParisNanterre.csv")
speech.say("C'est bon!")
csvFileNanterre = '/home/nao/dialog/ParisNanterre.csv'
csvRows = read_csv(csvFileNanterre)
entete = csvRows[0][0].split(';')

for row in csvRows[1:]:
    evenement = row[0].split(';')
    intervenants.append(evenement[0])
    projets.append(evenement[1])
    descriptions.append(evenement[2])
    dates.append(evenement[3])
    heures.append(evenement[4])
    vips.append(evenement[5])
    #titres.append(evenement[3])
    reponseStr.append("Le projet "+evenement[1]+" sera porté par "+evenement[0]+" \\pau=1000\\ le contenu de ce projet est \\pau=250\\ "+evenement[2]+" \\pau=150 \\et aura lieu le \\pau=150\\ "+evenement[3])

memory = ALProxy("ALMemory")
memory.insertData("intervenants", intervenants)
memory.insertData("projets", projets)
memory.insertData("descriptions", descriptions)
memory.insertData("dates", dates)
memory.insertData("vips", vips)
#memory.insertData("titres",titres)

for rep in reponseStr:
    speech.say(rep)

%script

u:(_~projet du _~jour _~mois _~annee) $jour=$2 $mois=$3 $annee=$4

%script
########## Recherche devenements sur le fichier projet (pas celui du sharepoint) TODO adapter les colonnes
speech = ALProxy("ALTextToSpeech")
memory = ALProxy("ALMemory")
jour = memory.getData("jour")
mois = memory.getData("mois")
annee= memory.getData("annee")
listeMois = ["janvier", "février", "mars", "avril", "mai", "juin", "juillet", "aout", "septembre", "octobre", "novembre", "decembre"]
speech.say("OK, je cherche les projets pour la date du "+ str(jour) + str(mois) + str(annee))
strDate = '{:02d}'.format(int(jour))+"/"+'{:02d}'.format(listeMois.index(str(mois))+1)+"/"+str(annee)

csvFile = '/home/nao/dialog/evenements.csv'
# invoke our function 
data = read_csv(csvFile)
entete = data[0][0].split(';')
intervenants = []
projets = []
descriptions = []
dates = []
strRepResults=""
for row in data[1:]:
    ligne = row[0].split(';')
    if ligne[3]==strDate:
        speech.say("Le projet "+ligne[1]+" est présenté par "+ligne[0]+"\\pau=1000\\ Voici le contenu que j'ai trouvé pour ce projet : "+"\\pau=500\\"+ligne[2]+"\\pau=500\\")


%script